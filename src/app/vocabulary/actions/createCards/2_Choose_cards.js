import { printWord } from "app/vocabulary/actions/functions";
import { CARDS_TO_CREATE } from "./index";
import { SortIdsByScore } from "./functions";

export default ({
  overdue_bad_ids,
  overdue_good_ids,
  not_overdue_bad_cards_ids,
  not_overdue_semi_bad_cards_ids,
  new_card_ids,
  very_recently_seen_not_overdue_bad_cards,
  not_overdue,
}) => {
  let total_options =
    overdue_bad_ids.length +
    overdue_good_ids.length +
    not_overdue_bad_cards_ids.length +
    not_overdue_semi_bad_cards_ids.length +
    new_card_ids.length;
  let chosen_ids = [];
  let newCardEvery = 3;
  let bad_count = overdue_bad_ids.length + not_overdue_bad_cards_ids.length;
  if (bad_count > 15) {
    newCardEvery = 5;
  }
  if (bad_count > 40) {
    newCardEvery = 20;
  }
  // process.env.NODE_ENV === "development" &&
  //   console.log({
  //     overdue_bad_ids_length: overdue_bad_ids.length,
  //     overdue_good_ids_length: overdue_good_ids.length,
  //     new_card_ids_length: new_card_ids.length,
  //     not_overdue_bad_cards_ids: not_overdue_bad_cards_ids.length,
  //     not_overdue_semi_bad_cards_ids: not_overdue_semi_bad_cards_ids.length,
  //     // overdue_bad_ids: overdue_bad_ids.map(printWord),
  //     // overdue_good_ids: overdue_good_ids.map(printWord),
  //     // new_card_ids: new_card_ids.map(printWord),
  //     newCardEvery,
  //   });

  /*
    Loop to select chosen cards
  */
  for (
    let i = 0;
    chosen_ids.length < Math.min(CARDS_TO_CREATE, total_options) && i < 1000;
    i++
  ) {
    if (!isEmpty(overdue_good_ids)) {
      chosen_ids.push(overdue_good_ids.shift());
    }
    if (!isEmpty(overdue_bad_ids)) {
      chosen_ids.push(overdue_bad_ids.shift());
    }
    if (i % newCardEvery === 0 && !isEmpty(new_card_ids)) {
      chosen_ids.push(new_card_ids.shift());
    }

    /* Occasionally show a bad card that the user saw in the last session */
    if (i % 4 === 2) {
      if (!isEmpty(very_recently_seen_not_overdue_bad_cards)) {
        process.env.NODE_ENV === "development" &&
          console.log(
            `Very recently seen word "${printWord(
              very_recently_seen_not_overdue_bad_cards[0]
            )}" added`
          );
        chosen_ids.push(very_recently_seen_not_overdue_bad_cards.shift());
      }
    }

    if (
      (isEmpty(overdue_good_ids) && isEmpty(overdue_bad_ids)) ||
      i % 2 === 1
    ) {
      if (!isEmpty(not_overdue_bad_cards_ids)) {
        process.env.NODE_ENV === "development" &&
          console.log(
            `Not overdue bad card "${printWord(
              not_overdue_bad_cards_ids[0]
            )}" added`
          );
        chosen_ids.push(not_overdue_bad_cards_ids.shift());
      }
    }
    if (isEmpty(overdue_good_ids) && isEmpty(overdue_bad_ids)) {
      if (i % 4 === 4 - 1 && !isEmpty(not_overdue_semi_bad_cards_ids)) {
        process.env.NODE_ENV === "development" &&
          console.log(
            `Not overdue good card "${printWord(
              not_overdue_semi_bad_cards_ids[0]
            )}" added`
          );
        chosen_ids.push(not_overdue_semi_bad_cards_ids.shift());
      }
    }
  }

  /* No cards generated by the above. Switch to not overdue. */
  if (chosen_ids.length === 0) {
    chosen_ids = SortIdsByScore(not_overdue);
  }

  return chosen_ids;
};

const isEmpty = (array) => array.length === 0;
