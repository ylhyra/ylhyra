import { CARDS_TO_CREATE } from "app/vocabulary/actions/createCards/index";
import { SortIdsByScore } from "app/vocabulary/actions/createCards/functions";
import { log } from "app/app/functions/log";
import { printWord } from "app/vocabulary/actions/functions";

export default ({
  overdue_bad,
  overdue_good,
  not_overdue_bad,
  not_overdue_semi_bad,
  new_cards,
  very_recently_seen_not_overdue_bad,
  not_overdue_ids,
}) => {
  let total_options = sumOfArrayLengths(
    overdue_bad,
    overdue_good,
    not_overdue_bad,
    not_overdue_semi_bad,
    new_cards
  );

  let chosen_cards = [];
  let newCardEvery = 3;
  let bad_count = sumOfArrayLengths(overdue_bad, not_overdue_bad);
  if (bad_count > 15) {
    newCardEvery = 5;
  }
  if (bad_count > 40) {
    newCardEvery = 20;
  }

  /*
    Loop to select chosen cards
  */
  for (
    let i = 0;
    chosen_cards.length < Math.min(CARDS_TO_CREATE, total_options) && i < 1000;
    i++
  ) {
    if (!isEmpty(overdue_good)) {
      chosen_cards.push(overdue_good.shift());
    }
    if (!isEmpty(overdue_bad)) {
      chosen_cards.push(overdue_bad.shift());
    }
    if (i % newCardEvery === 0 && !isEmpty(new_cards)) {
      chosen_cards.push(new_cards.shift());
    }

    /* Occasionally show a bad cardInSession that the user saw in the last session */
    if (i % 4 === 2) {
      if (!isEmpty(very_recently_seen_not_overdue_bad)) {
        log(
          `Very recently seen word "${printWord(
            very_recently_seen_not_overdue_bad[0]
          )}" added`
        );
        chosen_cards.push(very_recently_seen_not_overdue_bad.shift());
      }
    }

    if ((isEmpty(overdue_good) && isEmpty(overdue_bad)) || i % 2 === 1) {
      if (!isEmpty(not_overdue_bad)) {
        log(`Not overdue bad card "${printWord(not_overdue_bad[0])}" added`);
        chosen_cards.push(not_overdue_bad.shift());
      }
    }
    if (isEmpty(overdue_good) && isEmpty(overdue_bad)) {
      if (i % 4 === 4 - 1 && !isEmpty(not_overdue_semi_bad)) {
        log(
          `Not overdue good card "${printWord(not_overdue_semi_bad[0])}" added`
        );
        chosen_cards.push(not_overdue_semi_bad.shift());
      }
    }
  }

  /**
   * If no cards generated by the above,
   * we simply return cards that are not overdue.
   */
  if (chosen_cards.length === 0) {
    chosen_cards = SortIdsByScore(not_overdue_ids);
  }

  return chosen_cards;
};

const isEmpty = (array) => array.length === 0;
const sumOfArrayLengths = (...arrays) => {
  let length = 0;
  arrays.forEach((a) => (length += a.length));
  return length;
};
